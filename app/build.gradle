apply plugin: 'com.android.application'
apply plugin: 'kotlin-android'
apply plugin: 'kotlin-android-extensions'
apply plugin: 'kotlin-kapt'
apply plugin: 'com.github.ben-manes.versions'   // ./gradlew dependencyUpdates -Drevision=release
//apply from: 'quality.gradle'

repositories {
    flatDir {
        dirs 'libs'
    }
}

// Manifest version information!
def versionMajor = 0
def versionMinor = 4
def versionPatch = 0
def versionBuild = 0 // bump for dogfood builds, public betas, etc.

def isTravis = "true".equals(System.getenv("TRAVIS"))
def preDexEnabled = "true".equals(System.getProperty("pre-dex", "true"))
def clientIdIsNotSet = true;
def clientSecretIsNotSet = true;

def addConfigValues = { name, isDebug, suffix = "" ->
    def value = (isDebug ? "com.github.debug" : "com.github") + suffix

    android.defaultConfig.buildConfigField "String", name, "\"${value}\""
    android.defaultConfig.resValue "string", name.toLowerCase(), value
}

android {
    compileSdkVersion 28

    defaultConfig {
        applicationId 'com.github.pockethub.android'
        minSdkVersion 19
        targetSdkVersion 27
        multiDexEnabled true
        testInstrumentationRunner "androidx.test.runner.AndroidJUnitRunner"

        versionCode versionMajor * 10000 + versionMinor * 1000 + versionPatch * 100 + versionBuild
        versionName "${versionMajor}.${versionMinor}.${versionPatch}"
        vectorDrawables.useSupportLibrary = true

        addConfigValues("ACCOUNT_TYPE", false)
        addConfigValues("PROVIDER_AUTHORITY_SYNC", false, ".sync")
        addConfigValues("PROVIDER_AUTHORITY_SEARCH_SUGGEST_ISSUES", false, ".search.suggest.recent.issues")
        addConfigValues("PROVIDER_AUTHORITY_SEARCH_SUGGEST_REPOS", false, ".search.suggest.recent.repos")

        if (project.hasProperty('pockethub_github_client')) {
            resValue "string", "github_client", pockethub_github_client
            clientIdIsNotSet = false
        } else {
            resValue "string", "github_client", "dummy_client"
        }

        if (project.hasProperty('pockethub_github_secret')) {
            resValue "string", "github_secret", pockethub_github_secret
            clientSecretIsNotSet = false
        } else {
            resValue "string", "github_secret", "dummy_secret"
        }

        if (clientIdIsNotSet || clientSecretIsNotSet) {
            logger.warn("You won't be able to login, because the oauth client or secret isn't set")
            logger.warn("Read the README.md: https://github.com/pockethub/PocketHub#setup-environment")
        }

        if (project.hasProperty('pockethub_bugsnag_api_key')) {
            resValue "string", "bugsnag_api_key", pockethub_bugsnag_api_key
        } else {
            resValue "string", "bugsnag_api_key", "bugsnag-api-key"
        }

        String oauth = ""
        if (project.hasProperty('pockethub_github_callback')) {
            oauth = pockethub_github_callback
        } else {
            oauth = "http://dummy.example.com"
        }

        resValue "string", "github_oauth", oauth
        resValue "string", "github_oauth_scheme", oauth.split("://")[0]
    }


    buildTypes {
        debug {
            addConfigValues("ACCOUNT_TYPE", true)
            addConfigValues("PROVIDER_AUTHORITY_SYNC", true, ".sync")
            addConfigValues("PROVIDER_AUTHORITY_SEARCH_SUGGEST_ISSUES", true, ".search.suggest.recent.issues")
            addConfigValues("PROVIDER_AUTHORITY_SEARCH_SUGGEST_REPOS", true, ".search.suggest.recent.repos")
            applicationIdSuffix ".debug"
        }

        release {
            minifyEnabled false
            proguardFiles getDefaultProguardFile('proguard-android.txt'), 'proguard-rules.pro'
        }
    }

    compileOptions {
        sourceCompatibility JavaVersion.VERSION_1_8
        targetCompatibility JavaVersion.VERSION_1_8
    }

    testOptions {
        animationsDisabled = true
        unitTests {
            includeAndroidResources = true
        }
    }

    packagingOptions {
        exclude 'META-INF/DEPENDENCIES'
        exclude 'META-INF/LICENSE'
        exclude 'META-INF/NOTICE'
    }

    lintOptions {
        warning 'MissingTranslation'
        abortOnError true
        check 'NewApi', 'InlinedApi'
        fatal 'NewApi', 'InlinedApi'
        checkReleaseBuilds true
        
        textReport isTravis
        textOutput 'stdout'
        
        htmlReport !isTravis
        xmlReport !isTravis
    }

    dexOptions {
        // Skip pre-dexing when running on Travis CI or when disabled via -Dpre-dex=false.
        preDexLibraries = preDexEnabled && !isTravis
    }
}

androidExtensions {
    experimental = true
}

kapt {
    correctErrorTypes = true
}

dependencies {
    implementation fileTree(dir: 'libs', include: ['*.jar'])

    implementation "org.jetbrains.kotlin:kotlin-stdlib-jdk7:$kotlin_version"

    implementation 'androidx.appcompat:appcompat:1.0.2'
    implementation 'androidx.legacy:legacy-support-v4:1.0.0'
    implementation 'com.google.android.material:material:1.0.0'

    implementation 'androidx.core:core-ktx:1.0.1'

    implementation 'com.jakewharton.picasso:picasso2-okhttp3-downloader:1.1.0'
    implementation 'com.squareup.okhttp3:okhttp:3.10.0'

    implementation 'io.reactivex.rxjava2:rxandroid:2.0.2'
    implementation 'io.reactivex.rxjava2:rxjava:2.1.10'
    implementation 'com.uber.autodispose:autodispose:0.6.1'
    implementation 'com.uber.autodispose:autodispose-android-archcomponents:0.6.1'

    implementation 'com.bugsnag:bugsnag-android:4.3.1'

    implementation 'com.google.dagger:dagger:2.16'
    implementation 'com.google.dagger:dagger-android:2.15'
    implementation 'com.google.dagger:dagger-android-support:2.15'
    
    kapt 'com.google.dagger:dagger-compiler:2.16'
    kapt 'com.google.dagger:dagger-android-processor:2.16'

    compileOnly 'com.episode6.hackit.auto.factory:auto-factory-annotations:1.0-beta5'
    kapt 'com.google.auto.factory:auto-factory:1.0-beta5'

    implementation 'com.github.meisolsson:githubsdk:0.5.1'
    implementation 'com.afollestad.material-dialogs:core:0.9.6.0'
    implementation 'com.xwray:groupie:2.0.3'
    implementation 'com.xwray:groupie-kotlin-android-extensions:2.0.3'

    androidTestImplementation 'com.android.support.test.espresso:espresso-core:3.0.2'
    androidTestImplementation 'com.android.support:support-annotations:28.0.0'
    androidTestImplementation 'com.android.support.test:runner:1.0.2'
    androidTestImplementation 'com.android.support.test:rules:1.0.2'

    //Libs for testing
    testImplementation 'junit:junit:4.12'
    testImplementation "org.jetbrains.kotlin:kotlin-test-junit:$kotlin_version"
    testImplementation "org.mockito:mockito-core:2.18.3"
    testImplementation "org.robolectric:robolectric:3.7.1"
}
